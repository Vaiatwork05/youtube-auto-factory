# .github/workflows/daily-production.yml
# Workflow final optimis√© avec logs de diagnostic et mode debug.

name: üöÄ Production - Lancement Quotidien du Moteur

# ===============================================
# D√âCLENCHEURS
# ===============================================
on:
  schedule:
    - cron: '0 6,10,14,18 * * *' 
  
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer l''ex√©cution du Slot 1 (premier cr√©neau) pour un test imm√©diat.'
        required: true
        default: 'false'
        type: boolean
      # Ajout d'un input pour activer le Debug de l'Agent GitHub Actions
      github_debug:
        description: 'Activer les logs DEBUG de l''agent GitHub Actions (Tr√®s verbeux)'
        required: true
        default: 'false'
        type: boolean
        
permissions:
  contents: read 
  
jobs:
  daily_production_job:
    
    # ‚ö†Ô∏è Si le probl√®me de conteneur persiste, d√©commentez cette ligne et commentez 'container:'
    # runs-on: ubuntu-latest
    
    container:
      image: jrottenberg/ffmpeg:4.4-python3.11 
      
    runs-on: ubuntu-latest
    
    # ===============================================
    # LOGS AVANC√âS ET VARIABLES GLOBALES
    # ===============================================
    env:
      FORCE_RUN: ${{ github.event.inputs.force_run || 'false' }} 
      ENGINE_SCRIPT: 'content_factory/auto_content_engine.py'
      OUTPUT_ROOT: 'output' 
      
      # üîë INJECTION DES SECRETS (Configuration des modules Python)
      UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
      YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
      YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
      YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
      
      # üêû ACTIVATION DES LOGS DE DEBUG GITHUB ACTIONS
      ACTIONS_STEP_DEBUG: ${{ github.event.inputs.github_debug }} # Active le debug des √©tapes (tr√®s verbeux)
      RUNNER_DEBUG: ${{ github.event.inputs.github_debug }} # Active le debug de l'agent (pour le diagnostic du conteneur)
      
    steps:
    
    # ‚¨áÔ∏è √âTAPE 1: Initialisation
    - name: ‚¨áÔ∏è Log: D√©marrage et Checkout du code
      uses: actions/checkout@v4
      with:
        path: app 
        
    # üì¶ √âTAPE 2: Installation des d√©pendances Python
    - name: üì¶ Log: Pr√©paration de l'environnement et Installation des d√©pendances
      working-directory: ./app 
      run: |
        echo "## D√©marrage de l'installation des d√©pendances."
        echo "Chemin de travail: $(pwd)"
        
        # Afficher la version de Python et FFMPEG (diagnostic du conteneur)
        python --version
        ffmpeg -version | head -n 1 || echo "‚ö†Ô∏è FFMPEG non trouv√© ou erreur de chemin."
        
        python -m pip install --upgrade pip setuptools
        pip install -r requirements.txt 
        
        echo "## Installation termin√©e."

    # üöÄ √âTAPE 3: Ex√©cution du Moteur (Production)
    - name: üöÄ Log: Lancement du Moteur de Contenu
      working-directory: ./app
      run: |
        echo "## Lancement du script principal"
        echo "Mode FORC√â: ${{ env.FORCE_RUN }}"
        echo "V√©rification de l'existence du script..."
        
        # V√©rification du chemin avant l'ex√©cution
        if [ ! -f "${{ env.ENGINE_SCRIPT }}" ]; then
          echo "‚ùå ERREUR CRITIQUE: Le script ${{ env.ENGINE_SCRIPT }} n'existe pas dans le r√©pertoire de travail."
          # Afficher les fichiers du dossier pour le diagnostic
          find content_factory/ -name "*.py"
          exit 1
        fi
        
        echo "Script trouv√©. Ex√©cution..."
        # Ex√©cution du moteur Python avec l'argument --force-run
        python "${{ env.ENGINE_SCRIPT }}" --force-run ${{ env.FORCE_RUN }}
        
    # üíæ √âTAPE 4: Sauvegarde des artefacts
    - name: üíæ Log: Sauvegarde des Artefacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: resultats-${{ github.run_id }}
        path: app/${{ env.OUTPUT_ROOT }} 
        retention-days: 7 
        
    # üîî √âTAPE 5: Notifications
    - name: üîî Notification de Succ√®s
      if: success()
      run: |
        echo "üéâ Le workflow a r√©ussi !"
        
    - name: üîî Notification d'√âchec
      if: failure()
      run: |
        echo "‚ùå √âCHEC CRITIQUE: Le workflow a √©chou√©. Consulter les logs d√©taill√©s et l'artefact."
