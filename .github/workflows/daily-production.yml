name: Production YouTube Auto

on:
  schedule:
    - cron: '0 6,10,14,18 * * *'
  
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer execution'
        required: true
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  production:
    name: 🚀 Production
    runs-on: ubuntu-latest

    env:
      FORCE_RUN: ${{ fromJSON(github.event.inputs.force_run || 'false') }}

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🐍 Configuration Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 🔍 Diagnostic de l'environnement
        run: |
          echo "=== ENVIRONNEMENT ==="
          echo "Runner: ${{ runner.os }} - ${{ runner.arch }}"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Force run: $FORCE_RUN"
          echo ""
          echo "=== VERSIONS ==="
          python --version
          pip --version
          ffmpeg -version | head -1 || echo "FFmpeg pas encore installé"
          echo ""
          echo "=== STRUCTURE ==="
          find . -name "*.py" | head -10 | sort
          echo ""
          echo "=== CACHE INFO ==="
          python -m pip cache dir

      - name: 🛠️ Installation dépendances système
        run: |
          echo "📦 Installation de FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          echo "✅ FFmpeg version: $(ffmpeg -version | head -1)"

      - name: 📦 Installation dépendances Python
        run: |
          echo "📦 Mise à jour de pip..."
          python -m pip install --upgrade pip
          
          echo "📦 Installation des dépendances..."
          pip install -r requirements.txt
          
          echo "✅ Dépendances installées:"
          pip list --format=columns | grep -E "(openai|requests|youtube|pytube|moviepy|PIL|numpy)" | head -10

      - name: 🔧 Vérification pré-lancement
        run: |
          echo "=== VÉRIFICATIONS ==="
          
          # Vérification des fichiers critiques
          echo "📁 Fichiers critiques:"
          critical_files=(
            "content_factory/auto_content_engine.py"
            "content_factory/config_loader.py" 
            "content_factory/content_generator.py"
            "content_factory/video_creator.py"
            "content_factory/utils.py"
            "requirements.txt"
          )
          
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              echo "  ✅ $file"
            else
              echo "  ❌ $file - MANQUANT"
              exit 1
            fi
          done
          
          # Test des imports Python
          echo ""
          echo "🐍 Test des imports Python..."
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          python -c "
          try:
              print('  🔧 Import config_loader...')
              from content_factory.config_loader import ConfigLoader
              config = ConfigLoader().get_config()
              print('  ✅ Config chargée - Output:', config.get('PATHS', {}).get('OUTPUT_ROOT', 'output'))
              
              print('  🔧 Import content_generator...')
              from content_factory.content_generator import generate_daily_contents
              
              print('  🔧 Import video_creator...')
              from content_factory.video_creator import VideoCreator
              
              print('  🔧 Import utils...')
              from content_factory.utils import ensure_directory
              
              print('  🎉 Tous les imports - SUCCÈS')
          except Exception as e:
              print(f'  ❌ ERREUR: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: 🚀 Execution du moteur
        timeout-minutes: 30
        run: |
          echo "=== LANCEMENT DU MOTEUR ==="
          echo "🕐 Début: $(date)"
          echo "📁 Répertoire: $(pwd)"
          echo "🔧 Mode: $FORCE_RUN"
          
          # Configuration de l'environnement Python
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          echo ""
          echo "🎯 Exécution du script principal..."
          set -x  # Mode debug activé
          
          python content_factory/auto_content_engine.py --force-run "$FORCE_RUN" --debug
          
          set +x  # Mode debug désactivé
          echo ""
          echo "🕐 Fin: $(date)"
          echo "✅ Execution terminée"

      - name: 📊 Analyse des résultats
        if: always()
        run: |
          echo "=== ANALYSE POST-EXECUTION ==="
          echo "📁 Contenu du workspace:"
          ls -la
          
          echo ""
          if [ -d "output" ]; then
            echo "✅ Dossier 'output' créé"
            echo "📊 Contenu:"
            find output/ -type f | head -15
            echo ""
            echo "📏 Taille: $(du -sh output/)"
          else
            echo "❌ Aucun dossier 'output' créé"
          fi
          
          echo ""
          echo "🗂️ Fichiers logs:"
          find . -name "*.log" -type f | head -5

      - name: 💾 Sauvegarde des résultats
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-results-${{ github.run_id }}
          path: |
            output/
            *.log
          retention-days: 7
          compression-level: 0

      - name: 📈 Rapport final
        if: always()
        run: |
          echo "=== RAPPORT FINAL ==="
          echo "🎯 Workflow: ${{ github.workflow }}"
          echo "🆔 Run ID: ${{ github.run_id }}"
          echo "📅 Date: $(date)"
          
          if [ -d "output" ]; then
            result_count=$(find output/ -type f | wc -l)
            echo "📊 Résultats: $result_count fichiers produits"
            echo "✅ SUCCÈS - Production terminée"
          else
            echo "📊 Résultats: Aucun output produit"
            echo "⚠️ ATTENTION - Vérifier les logs"
          fi
