Name: 🚀 Génération Vidéo Automatisée

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Activer le mode Debug (création d''images factices)'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: "0 6,12,18 * * *" # 6h00, 12h00, 18h00 UTC

jobs:
  generate-video:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      # ÉTAPE 1: Récupération du code source
      - name: 📥 Checkout du repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ÉTAPE 2: Configuration de l'environnement Python
      - name: 🐍 Configuration de Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      # ÉTAPE 3: Installation des dépendances système
      - name: 📦 Installation des dépendances système
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg espeak libespeak1
          echo "✅ Dépendances système installées"
      
      # ÉTAPE 4: Installation des dépendances Python
      - name: 🔧 Installation des dépendances Python
        run: |
          python -m pip install --upgrade pip
          pip install Pillow numpy requests openai gtts moviepy pydub
          echo "✅ Dépendances Python installées"

      # ÉTAPE 5: Création de la structure de dossiers
      - name: 📁 Création de l'arborescence
        run: |
          mkdir -p output/{videos,audio,images,logs}
          mkdir -p scripts # Ajout pour le nouveau script
          echo "✅ Structure de dossiers créée"
      
      # ÉTAPE 6: Vérification des fichiers existants
      - name: 🔍 Vérification des composants
        run: |
          echo "🔍 Vérification des fichiers content_factory..."
          echo "📁 Contenu du dossier content_factory/:"
          ls -la content_factory/
          echo " "
          
          # Test des imports Python (Syntaxe correcte car simple)
          python3 -c "
try:
    from content_factory.image_manager import ImageManager
    from content_factory.audio_generator import AudioGenerator  
    from content_factory.video_creator import VideoCreator
    from content_factory.content_generator import ContentGenerator
    from content_factory.auto_content_engine import main
    print('✅ Tous les imports fonctionnent')
except Exception as e:
    print(f'❌ Erreur import: {e}')
    exit(1)
          "
          echo "✅ Tous les composants sont opérationnels"

      # ÉTAPE 7: Désactivation YouTube Uploader si nécessaire
      # CORRECTION APPLIQUÉE ICI : Appel direct du script Python
      - name: 🚫 Désactivation YouTube Uploader via script
        run: python3 scripts/disable_youtube_uploader.py

      # ÉTAPE 8: Configuration de l'environnement
      - name: 🔑 Configuration des variables
        run: |
          echo "DEBUG_MODE=${{ github.event.inputs.debug_mode || 'false' }}" >> $GITHUB_ENV
          echo "✅ Variables d'environnement configurées"

      # ÉTAPE 9: Exécution de la génération
      - name: 🎬 Exécution du Moteur de Contenu
        run: |
          echo "🎬 LANCEMENT DE LA GÉNÉRATION..."
          echo "📜 Utilisation de: content_factory/auto_content_engine.py"
          echo "🔧 Mode Debug: $DEBUG_MODE"
          
          # Vérifier que le fichier existe
          if [ -f "content_factory/auto_content_engine.py" ]; then
            python content_factory/auto_content_engine.py
          else
            echo "❌ Fichier auto_content_engine.py non trouvé"
            echo "📋 Fichiers disponibles:"
            find content_factory/ -name "*.py" | head -10
            exit 1
          fi

      # ÉTAPE 10: Sauvegarde des résultats
      - name: 💾 Sauvegarde des artefacts
        uses: actions/upload-artifact@v4
        with:
          name: generation-resultats-${{ github.sha }}
          path: |
            output/
          retention-days: 2
          if-no-files-found: warn

      # ÉTAPE 11: Rapport final détaillé
      - name: 📊 Rapport final
        if: always()
        run: |
          echo " "
          echo "📊 RAPPORT FINAL DE GÉNÉRATION"
          echo "================================"
          echo "🏃 Workflow: $GITHUB_WORKFLOW"
          echo "📅 Exécution: $(date)"
          echo "🔧 Mode Debug: $DEBUG_MODE"
          echo " "
          
          echo "📁 CONTENU GÉNÉRÉ:"
          echo "------------------"
          for dossier in videos audio images logs; do
            if [ -d "output/$dossier" ]; then
              count=$(find "output/$dossier" -type f 2>/dev/null | wc -l)
              echo "📂 output/$dossier: $count fichiers"
            else
              echo "📂 output/$dossier: dossier non trouvé"
            fi
          done
          
          echo " "
          echo "🔍 FICHIERS DÉTAILLÉS:"
          echo "---------------------"
          find output/ -type f 2>/dev/null | while read file; do
            size=$(du -h "$file" 2>/dev/null | cut -f1 | head -1 || echo "0K")
            echo "📄 $(basename "$file") ($size)"
          done || echo "Aucun fichier trouvé dans output/"
          
          echo " "
          if [ -f "output/logs/rapport_generation.txt" ]; then
            echo "📋 RAPPORT PRINCIPAL:"
            echo "-------------------"
            cat output/logs/rapport_generation.txt
          fi
          
          echo " "
          echo "🎉 PROCESSUS TERMINÉ !"
