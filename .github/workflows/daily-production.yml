# .github/workflows/daily-production.yml
# Workflow final optimis√© pour la production quotidienne.

name: üöÄ Production - Lancement Quotidien du Moteur

# ===============================================
# D√âCLENCHEURS
# ===============================================
on:
  # D√©clenche le workflow √† 06h, 10h, 14h et 18h UTC
  schedule:
    - cron: '0 6,10,14,18 * * *' 
  
  # Lancement Manuel pour le test
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer l''ex√©cution du Slot 1 (premier cr√©neau) pour un test imm√©diat.'
        required: true
        default: 'false'
        type: boolean
        
permissions:
  contents: read 
  
jobs:
  daily_production_job:
    
    # ‚ö†Ô∏è Utilisation d'un conteneur avec FFMPEG. Si ce conteneur √©choue,
    # essayez python:3.11-slim-buster et ajoutez 'sudo apt-get install ffmpeg' dans l'√©tape 2.
    container:
      image: jrottenberg/ffmpeg:4.4-python3.11 
      
    runs-on: ubuntu-latest
    
    # ===============================================
    # VARIABLES D'ENVIRONNEMENT GLOBALES
    # ===============================================
    env:
      FORCE_RUN: ${{ github.event.inputs.force_run || 'false' }} 
      ENGINE_SCRIPT: 'content_factory/auto_content_engine.py'
      OUTPUT_ROOT: 'output' 
      
      # üîë INJECTION DES SECRETS (Configuration des modules Python)
      UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
      YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
      YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
      YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
      
    steps:
    
    # ‚¨áÔ∏è √âTAPE 1: Initialisation
    - name: ‚¨áÔ∏è Checkout du code
      uses: actions/checkout@v4
      with:
        path: app 
    
    # üì¶ √âTAPE 2: Installation des d√©pendances Python
    - name: üì¶ Pr√©paration de l'environnement
      working-directory: ./app 
      run: |
        echo "## Installation des d√©pendances Python"
        python -m pip install --upgrade pip setuptools
        
        # Installation des librairies
        pip install -r requirements.txt 
        
    # üöÄ √âTAPE 3: Ex√©cution du Moteur (Production)
    - name: üöÄ Lancement du Moteur de Contenu
      working-directory: ./app
      run: |
        echo "## D√©marrage du processus de g√©n√©ration et d'upload. (Force Run: ${{ env.FORCE_RUN }})"
        
        # Ex√©cution du moteur Python avec l'argument --force-run
        python "${{ env.ENGINE_SCRIPT }}" --force-run ${{ env.FORCE_RUN }}
          
    # üíæ √âTAPE 4: Sauvegarde des artefacts
    - name: üíæ Sauvegarde des Artefacts de g√©n√©ration
      uses: actions/upload-artifact@v4
      if: always() 
      with:
        name: resultats-${{ github.run_id }}
        path: app/${{ env.OUTPUT_ROOT }} 
        retention-days: 7 
        
    # üîî √âTAPE 5: Notifications
    - name: üîî Notification de Succ√®s
      if: success()
      run: |
        echo "üéâ Le workflow de production s'est termin√© avec succ√®s !"
        
    - name: üîî Notification d'√âchec
      if: failure()
      run: |
        echo "‚ùå √âCHEC CRITIQUE: Le workflow de production a √©chou√©."
