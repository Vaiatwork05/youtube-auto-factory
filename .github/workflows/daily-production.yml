name: 🚀 Production - Système avec Diagnostic Complet

on:
  schedule:
    - cron: '0 6,10,14,18 * * *'
  
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer exécution du moteur'
        required: true
        default: false
        type: boolean
      skip_verification:
        description: 'Ignorer les vérifications'
        required: true
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  verification:
    name: 🔍 Vérification du Système
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_verification }}
    
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 📊 Diagnostic de l'Environnement
        run: |
          echo "## 🖥️ INFORMATION SYSTÈME"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"
          echo "Répertoire de travail: $GITHUB_WORKSPACE"
          
          echo "## 📁 STRUCTURE DU PROJET"
          echo "Arborescence complète:"
          find . -type f -name "*.py" | head -20 | sort
          
          echo "## 🐍 ENVIRONNEMENT PYTHON"
          python --version || echo "Python non installé"
          pip --version || echo "Pip non installé"
          
          echo "## 🔧 OUTILS SYSTÈME"
          ffmpeg -version 2>/dev/null | head -1 || echo "❌ FFmpeg non installé"
          which docker && docker --version || echo "Docker non disponible"

      - name: 🔍 Vérification des Fichiers Critiques
        run: |
          echo "## 📋 VÉRIFICATION DES FICHIERS"
          
          critical_files=(
            "content_factory/auto_content_engine.py"
            "content_factory/config_loader.py"
            "content_factory/content_generator.py"
            "content_factory/video_creator.py"
            "content_factory/youtube_uploader.py"
            "content_factory/utils.py"
            "requirements.txt"
            "config/settings.yaml"
          )
          
          all_exists=true
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ $file - MANQUANT"
              all_exists=false
            fi
          done
          
          if [ "$all_exists" = false ]; then
            echo "::error::Fichiers critiques manquants"
            exit 1
          fi

      - name: 🧪 Test des Imports Python
        run: |
          echo "## 🐍 TEST DES IMPORTS PYTHON"
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          python -c "
          try:
              print('🔧 Test import config_loader...')
              from content_factory.config_loader import ConfigLoader
              print('✅ config_loader - OK')
              
              print('🔧 Test import content_generator...')
              from content_factory.content_generator import generate_daily_contents
              print('✅ content_generator - OK')
              
              print('🔧 Test import video_creator...')
              from content_factory.video_creator import VideoCreator
              print('✅ video_creator - OK')
              
              print('🔧 Test import utils...')
              from content_factory.utils import ensure_directory
              print('✅ utils - OK')
              
              print('🎉 TOUS LES IMPORTS - SUCCÈS')
              
          except Exception as e:
              print(f'❌ ERREUR IMPORT: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: 📦 Vérification des Dépendances
        run: |
          echo "## 📦 VÉRIFICATION REQUIREMENTS.TXT"
          if [ -f "requirements.txt" ]; then
            echo "Contenu de requirements.txt:"
            cat requirements.txt
            echo "Nombre de dépendances: $(wc -l < requirements.txt)"
          else
            echo "❌ requirements.txt non trouvé"
            exit 1
          fi

  production:
    name: 🚀 Moteur de Production
    runs-on: ubuntu-latest
    needs: verification
    if: ${{ needs.verification.result == 'success' || github.event.inputs.skip_verification }}

    env:
      FORCE_RUN: ${{ fromJSON(github.event.inputs.force_run || 'false') }}
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration Python avec Cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 🛠️ Installation des Dépendances Système
        run: |
          echo "## 🔧 INSTALLATION FFMPEG"
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          echo "✅ FFmpeg version: $(ffmpeg -version | head -1)"

      - name: 📦 Installation des Dépendances Python
        run: |
          echo "## 📦 INSTALLATION DES PAQUETS PYTHON"
          pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "## 🔍 VÉRIFICATION DES INSTALLATIONS"
          pip list --format=columns | grep -E "(openai|requests|youtube|pytube|moviepy)" || echo "⚠️ Certains packages non trouvés"

      - name: 🔧 Vérification Pré-Lancement
        run: |
          echo "## 🔧 VÉRIFICATION FINALE PRÉ-LANCEMENT"
          echo "📁 Répertoire: $(pwd)"
          echo "🐍 PYTHONPATH: $PYTHONPATH"
          
          # Vérifier que le script principal existe
          if [ ! -f "content_factory/auto_content_engine.py" ]; then
            echo "❌ ERREUR: Script principal non trouvé"
            find . -name "*.py" | head -10
            exit 1
          fi
          
          # Tester l'exécution basique
          echo "🧪 Test d'exécution basique..."
          python -c "
          import sys
          print('Python path:', sys.path)
          try:
              from content_factory.auto_content_engine import main
              print('✅ Import main() - SUCCÈS')
          except Exception as e:
              print(f'❌ Import main() - ÉCHEC: {e}')
              sys.exit(1)
          "
          echo "✅ Tous les tests de vérification passés"

      - name: 🚀 Exécution du Moteur de Contenu
        timeout-minutes: 30
        run: |
          echo "## 🚀 LANCEMENT DU MOTEUR DE PRODUCTION"
          echo "Mode FORCE: $FORCE_RUN"
          echo "Date: $(date)"
          echo "Répertoire: $(pwd)"
          
          # Log détaillé de l'environnement
          echo "## 🌍 ENVIRONNEMENT D'EXÉCUTION"
          env | grep -E "(PYTHON|PATH|HOME|WORK)" | sort
          
          echo "## 🐍 DÉMARRAGE DU SCRIPT..."
          set -x  # Active le mode debug pour voir les commandes exécutées
          
          python content_factory/auto_content_engine.py --force-run "$FORCE_RUN" --debug
          
          set +x
          echo "🎉 Moteur exécuté avec succès"

      - name: 📁 Analyse des Résultats
        if: always()
        run: |
          echo "## 📁 ANALYSE POST-EXÉCUTION"
          echo "📊 Contenu du répertoire:"
          ls -la
          
          if [ -d "output" ]; then
            echo "## 🎯 CONTENU DU DOSSIER OUTPUT:"
            find output/ -type f | head -20
            echo "📏 Taille totale: $(du -sh output/)"
          else
            echo "⚠️ Aucun dossier output créé"
          fi
          
          if [ -d "logs" ]; then
            echo "## 📋 LOGS DISPONIBLES:"
            find logs/ -type f | head -10
          fi

      - name: 💾 Sauvegarde des Résultats
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-results-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            output/
            logs/
            *.log
          retention-days: 7
          compression-level: 0

      - name: 📊 Rapport de Production
        if: always()
        run: |
          echo "## 📊 RAPPORT FINAL"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Attempt: ${{ github.run_attempt }}"
          echo "Statut: ${{ job.status }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 PRODUCTION RÉUSSIE"
          else
            echo "❌ PRODUCTION ÉCHOUÉE"
            echo "Consulter les logs détaillés ci-dessus"
          fi

  notification:
    name: 🔔 Notification
    runs-on: ubuntu-latest
    needs: [verification, production]
    if: always()

    steps:
      - name: 📢 Rapport Final
        run: |
          echo "## 🔔 RAPPORT DE WORKFLOW"
          echo "Verification: ${{ needs.verification.result }}"
          echo "Production: ${{ needs.production.result }}"
          
          if [ "${{ needs.verification.result }}" = "success" ] && [ "${{ needs.production.result }}" = "success" ]; then
            echo "🎉 SUCCÈS COMPLET - Système opérationnel"
          elif [ "${{ needs.verification.result }}" = "failure" ]; then
            echo "❌ ÉCHEC VÉRIFICATION - Problème de configuration"
          elif [ "${{ needs.production.result }}" = "failure" ]; then
            echo "⚠️ VÉRIFICATION OK - PRODUCTION ÉCHOUÉE"
          else
            echo "🔧 STATUT INCONNU - Vérifier les logs"
          fi
