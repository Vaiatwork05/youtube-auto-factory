# content_factory/auto_content_engine.py
import os
import sys
import time
from datetime import datetime
from content_generator import generate_daily_contents, ContentGenerator
from video_creator import VideoCreator
from youtube_uploader import YouTubeUploader
from utils import ensure_directory

def get_current_slot():
    """
    D√©termine le cr√©neau actuel bas√© sur l'heure
    8h = slot 0, 12h = slot 1, 16h = slot 2, 20h = slot 3
    """
    current_hour = datetime.now().hour
    
    if 7 <= current_hour < 11:   # 8h
        return 0
    elif 11 <= current_hour < 15: # 12h  
        return 1
    elif 15 <= current_hour < 19: # 16h
        return 2
    elif 19 <= current_hour <= 23: # 20h
        return 3
    else:
        # Si en dehors des heures programm√©es, utiliser le premier slot
        return 0

def create_video_for_slot(slot_number):
    """Cr√©e une vid√©o pour un cr√©neau sp√©cifique"""
    try:
        print(f"\nüé¨ CR√âNEAU {slot_number + 1}/4")
        print("=" * 40)
        
        # G√©n√©rer le contenu pour ce cr√©neau
        daily_contents = generate_daily_contents()
        content_data = daily_contents[slot_number]
        
        print(f"üìù Titre: {content_data['title']}")
        print(f"üìÇ Cat√©gorie: {content_data['category']}")
        print(f"üî¢ Slot: {content_data['slot_number'] + 1}")
        print(f"üå± Seed quotidienne: {content_data['daily_seed']}")
        print(f"üìÑ Script: {content_data['script'][:100]}...")
        
        # Cr√©er la vid√©o
        creator = VideoCreator()
        video_path = creator.create_professional_video(content_data)
        
        print(f"‚úÖ Vid√©o cr√©√©e: {video_path}")
        return video_path, content_data
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©neau {slot_number + 1}: {e}")
        return None, None

def create_all_daily_videos():
    """Cr√©e les 4 vid√©os de la journ√©e (pour tests)"""
    successful_videos = []
    
    print("üöÄ LANCEMENT DE TOUS LES CR√âNEAUX QUOTIDIENS")
    print("=" * 50)
    
    for slot in range(4):
        video_path, content_data = create_video_for_slot(slot)
        
        if video_path:
            successful_videos.append({
                'path': video_path,
                'title': content_data['title'],
                'slot': slot + 1
            })
        
        # Pause entre les cr√©neaux
        if slot < 3:
            print("\n‚è≥ Pause avant le prochain cr√©neau...")
            time.sleep(2)
    
    return successful_videos

def main():
    try:
        print("=" * 60)
        print("üéØ YOUTUBE AUTO FACTORY - SYST√àME QUOTIDIEN 4x")
        print("=" * 60)
        print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # V√©rifications initiales
        print("\nüìã √âTAPE 1: V√©rification des configurations...")
        ensure_directory("output/audio")
        ensure_directory("output/videos")
        ensure_directory("downloaded_images")
        
        print("‚úÖ Tous les dossiers sont pr√™ts!")
        
        # D√©terminer le mode d'ex√©cution
        if len(sys.argv) > 1 and sys.argv[1] == "--all":
            # Mode test : cr√©er les 4 vid√©os
            successful_videos = create_all_daily_videos()
        else:
            # Mode production : cr√©er seulement la vid√©o du cr√©neau actuel
            current_slot = get_current_slot()
            print(f"üïê Cr√©neau d√©tect√©: {current_slot + 1}/4")
            
            video_path, content_data = create_video_for_slot(current_slot)
            successful_videos = [{
                'path': video_path,
                'title': content_data['title'],
                'slot': current_slot + 1
            }] if video_path else []
        
        # R√©sum√© final
        print("\n" + "=" * 50)
        print("üìä RAPPORT DE PRODUCTION")
        print("=" * 50)
        print(f"‚úÖ Vid√©os cr√©√©es avec succ√®s: {len(successful_videos)}")
        
        for video in successful_videos:
            print(f"   üé¨ Cr√©neau {video['slot']}: {video['title']}")
        
        if successful_videos:
            print("\nüéâ PROCESSUS TERMIN√â AVEC SUCC√àS!")
            
            # Optionnel : Upload YouTube
            try:
                uploader = YouTubeUploader()
                # uploader.upload_video(successful_videos[0]['path'], content_data)
                print("üì§ Vid√©o pr√™te pour l'upload (upload d√©sactiv√©)")
            except Exception as e:
                print(f"‚ö†Ô∏è Upload non effectu√©: {e}")
                
            return True
        else:
            print("\n‚ùå Aucune vid√©o cr√©√©e avec succ√®s")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
