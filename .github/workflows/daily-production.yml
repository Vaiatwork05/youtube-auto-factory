# .github/workflows/daily-production.yml

name: 🚀 Production - Lancement Quotidien du Moteur

# ... (Déclencheurs et Permissions restent inchangés)
on:
  schedule:
    - cron: '0 6,10,14,18 * * *' 
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer l''exécution du Slot 1 (premier créneau) pour un test immédiat.'
        required: true
        default: 'false'
        type: boolean
        
permissions:
  contents: read 
  
jobs:
  
  # ===============================================
  # JOB 1: Exécution du Moteur (Nécessite le Conteneur)
  # ===============================================
  engine_run:
    runs-on: ubuntu-latest
    
    # Définition du conteneur POUR CE JOB
    container:
      image: jrottenberg/ffmpeg:4.4-python3.11 
      
    # Variables d'environnement pour ce Job (inchangées)
    env:
      FORCE_RUN: ${{ github.event.inputs.force_run || 'false' }} 
      ENGINE_SCRIPT: 'content_factory/auto_content_engine.py'
      OUTPUT_ROOT: 'output' 
      UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
      YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
      YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
      YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
      
    steps:
      # ⬇️ ÉTAPE 1: Checkout
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4
        with:
          path: app 
      
      # 📦 ÉTAPE 2: Installation des dépendances Python
      - name: 📦 Préparation de l'environnement
        working-directory: ./app 
        run: |
          # ... (Logs d'installation)
          python -m pip install --upgrade pip setuptools
          pip install -r requirements.txt 
          ffmpeg -version | head -n 1
          
      # 🚀 ÉTAPE 3: Exécution du Moteur (C'est ici que l'échec peut se produire)
      - name: 🚀 Lancement du Moteur de Contenu
        working-directory: ./app
        id: engine_execution # Ajout d'un ID pour la référence future
        run: |
          # ... (Logs d'exécution)
          python "${{ env.ENGINE_SCRIPT }}" --force-run ${{ env.FORCE_RUN }}

          # Vérifiez si le script a produit des fichiers pour l'upload
          ls -R app/${{ env.OUTPUT_ROOT }} 2>/dev/null >/dev/null
          if [ $? -eq 0 ]; then
            echo "::set-output name=files_produced::true"
          else
            echo "::set-output name=files_produced::false"
          fi
          
      # 💾 ÉTAPE 4: Sauvegarde des artefacts (Upload effectif)
      - name: ⬆️ Upload des Artefacts de génération
        uses: actions/upload-artifact@v4
        if: always() # Upload même si le script Python échoue
        with:
          name: resultats-${{ github.run_id }}
          path: app/${{ env.OUTPUT_ROOT }} 
          retention-days: 7 
          
  # ===============================================
  # JOB 2: Notifications et Logs de Fin (SANS conteneur)
  # ===============================================
  notification_job:
    runs-on: ubuntu-latest
    needs: engine_run # Dépend du Job d'exécution du moteur
    if: always() # S'exécute toujours, même si engine_run échoue
    
    steps:
      # 🔔 Notification de Succès
      - name: 🔔 Notification de Succès
        if: success() && needs.engine_run.result == 'success'
        run: |
          echo "==========================================="
          echo "🎉 Le workflow de production s'est terminé avec succès !"
          echo "==========================================="
          
      # 🔔 Notification d'Échec
      - name: 🔔 Notification d'Échec
        if: failure() || needs.engine_run.result == 'failure'
        run: |
          echo "==========================================="
          echo "❌ ÉCHEC CRITIQUE: Le workflow de production a échoué."
          echo "❌ Veuillez consulter les logs du Job 'engine_run' pour diagnostiquer le problème."
          echo "==========================================="
