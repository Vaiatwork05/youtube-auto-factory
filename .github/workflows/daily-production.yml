name: 🚀 ULTIME - Génération Vidéo

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"   # 8h CEST
    - cron: "0 10 * * *"  # 12h CEST
    - cron: "0 14 * * *"  # 16h CEST
    - cron: "0 18 * * *"  # 20h CEST

jobs:
  generate-video:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg espeak

      - name: 🔧 Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: 📁 Create output directories
        run: |
          mkdir -p output/videos output/audio output/images output/logs

      - name: 🔧 Corriger ImageManager (méthode Python)
        run: |
          echo "🔧 Vérification/correction ImageManager..."
          python3 -c "
          import os
          
          # Vérifier si ImageManager existe déjà
          with open('content_factory/image_manager.py', 'r') as f:
              content = f.read()
          
          if 'class ImageManager' in content:
              print('✅ ImageManager existe déjà')
          else:
              print('📝 Ajout de ImageManager...')
              new_content = content + '''

class ImageManager:
    def __init__(self):
        self.image_dir = \"output/images\"
        os.makedirs(self.image_dir, exist_ok=True)
    
    def get_images_for_content(self, content_data, num_images=6):
        \"\"\"Récupère des images pour le contenu\"\"\"
        print(\"🖼️  Récupération d'images...\")
        images = []
        for i in range(num_images):
            img_path = os.path.join(self.image_dir, f\"image_{i}.jpg\")
            # Créer une image simple
            from PIL import Image, ImageDraw, ImageFont
            img = Image.new('RGB', (1280, 720), color=(i*40, 100, 150))
            draw = ImageDraw.Draw(img)
            img.save(img_path)
            images.append(img_path)
        return images
'''
              with open('content_factory/image_manager.py', 'w') as f:
                  f.write(new_content)
              print('✅ ImageManager ajouté')
          "

      - name: 🔧 Désactiver YouTube Upload (méthode Python)
        run: |
          echo "🔧 Désactivation YouTube Upload avec Python..."
          python3 -c "
          # Lire le fichier
          with open('content_factory/auto_content_engine.py', 'r') as f:
              lines = f.readlines()
          
          # Remplacer la ligne problématique
          new_lines = []
          for line in lines:
              if line.strip().startswith('from youtube_uploader import YouTubeUploader'):
                  new_lines.append('# from youtube_uploader import YouTubeUploader  # Désactivé temporairement\n')
              else:
                  new_lines.append(line)
          
          # Réécrire le fichier
          with open('content_factory/auto_content_engine.py', 'w') as f:
              f.writelines(new_lines)
          
          print('✅ YouTube Upload désactivé')
          "

      - name: 🧪 Test final
        run: |
          echo "🧪 Test final avant génération..."
          python -c "
          try:
              from content_factory.image_manager import ImageManager
              mgr = ImageManager()
              print('✅ ImageManager fonctionne')
              
              from content_factory.audio_generator import AudioGenerator
              audio = AudioGenerator()
              print('✅ AudioGenerator fonctionne')
              
              from content_factory.video_creator import VideoCreator
              video = VideoCreator()
              print('✅ VideoCreator fonctionne')
              
              print('🎉 SYSTÈME PRÊT !')
          except Exception as e:
              print(f'❌ Erreur: {e}')
              exit(1)
          "

      - name: 🎬 Générer la vidéo
        run: |
          echo "🎬 LANCEMENT DE LA GÉNÉRATION VIDÉO..."
          python content_factory/auto_content_engine.py

      - name: 📤 Télécharger les résultats
        uses: actions/upload-artifact@v4
        with:
          name: videos-generées
          path: output/
          retention-days: 1

      - name: 📊 Rapport final
        if: always()
        run: |
          echo "📊 RAPPORT FINAL"
          echo "================"
          echo "📹 Vidéos: $(find output/videos -name '*.mp4' 2>/dev/null | wc -l)"
          echo "🔊 Audios: $(find output/audio -name '*.mp3' 2>/dev/null | wc -l)"
          echo "🖼️ Images: $(find output/images -name '*.jpg' 2>/dev/null | wc -l)"
          echo "🎉 GÉNÉRATION TERMINÉE !"
