# .github/workflows/daily-production.yml
# Workflow final optimis√© pour la production quotidienne.

name: üöÄ Production - Lancement Quotidien du Moteur

# ===============================================
# D√âCLENCHEURS
# ===============================================
on:
  # 1. Planification Quotidienne (Les 4 heures de publication UTC)
  schedule:
    # Correspond aux SLOT_HOURS_UTC dans config.yaml, ex: 06h00, 10h00, 14h00, 18h00 UTC
    - cron: '0 6,10,14,18 * * *' 
  
  # 2. Lancement Manuel (pour le test ou la correction)
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer l''ex√©cution du premier cr√©neau (Slot 1) pour un test imm√©diat, ignorant l''heure UTC.'
        required: true
        default: 'false'
        type: boolean
        
# Permissions de s√©curit√© minimales
permissions:
  contents: read # Lecture seule pour le checkout
  
jobs:
  daily_production_job:
    
    # Utilisation d'une image Docker pr√©-packag√©e avec Python et FFMPEG
    container:
      image: jrottenberg/ffmpeg:4.4-python3.11 
      
    runs-on: ubuntu-latest
    
    # ===============================================
    # VARIABLES D'ENVIRONNEMENT GLOBALES
    # ===============================================
    env:
      # Passe l'input manuel au script Python via l'argument --force-run
      FORCE_RUN: ${{ github.event.inputs.force_run || 'false' }} 
      ENGINE_SCRIPT: 'content_factory/auto_content_engine.py'
      OUTPUT_ROOT: 'output' 
      
      # üîë INJECTION DES SECRETS DE PRODUCTION (Utilis√©s par ConfigLoader et Uploader)
      # Assurez-vous que ces secrets sont configur√©s dans les settings GitHub
      UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
      YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
      YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
      YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
      
    steps:
    
    # ‚¨áÔ∏è √âTAPE 1: Initialisation
    - name: ‚¨áÔ∏è Checkout du code
      uses: actions/checkout@v4
      with:
        path: app # Le code est clon√© dans le sous-r√©pertoire /app
    
    # üì¶ √âTAPE 2: Installation des d√©pendances Python
    - name: üì¶ Pr√©paration de l'environnement (Installation des PIP)
      working-directory: ./app 
      run: |
        echo "## Installation des d√©pendances Python"
        python -m pip install --upgrade pip setuptools
        
        # Le fichier requirements.txt doit contenir: moviepy, google-api-python-client, PyYAML, requests, Pillow, etc.
        pip install -r requirements.txt 
        
    # üöÄ √âTAPE 3: Ex√©cution du Moteur (Production)
    - name: üöÄ Lancement du Moteur de Contenu
      working-directory: ./app
      run: |
        echo "## D√©marrage du processus de g√©n√©ration et d'upload"
        
        # Le script auto_content_engine.py est ex√©cut√© avec l'argument --force-run
        python "${{ env.ENGINE_SCRIPT }}" --force-run ${{ env.FORCE_RUN }}
          
    # üíæ √âTAPE 4: Sauvegarde des artefacts (Vid√©o finale, Logs, etc.)
    - name: üíæ Sauvegarde des Artefacts de g√©n√©ration
      uses: actions/upload-artifact@v4
      if: always() # Toujours uploader, m√™me en cas d'√©chec, pour l'analyse
      with:
        name: resultats-${{ github.run_id }}
        path: app/${{ env.OUTPUT_ROOT }} 
        retention-days: 7 
        
    # üîî √âTAPE 5: Notifications
    - name: üîî Notification de Succ√®s
      if: success()
      run: |
        echo "üéâ Le workflow de production s'est termin√© avec succ√®s ! Vid√©o cr√©√©e et upload√©e."
        
    - name: üîî Notification d'√âchec
      if: failure()
      run: |
        echo "‚ùå √âCHEC CRITIQUE: Le workflow de production a √©chou√©. Consulter l'artefact pour les d√©tails."
        
