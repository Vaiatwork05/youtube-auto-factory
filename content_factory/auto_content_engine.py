# content_factory/auto_content_engine.py
import os
import sys
import time
import traceback
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple, List, Optional

# Imports des modules du projet (Assurez-vous que les imports sont pr√©cis)
from content_generator import generate_daily_contents, ContentGenerator
from video_creator import VideoCreator
from youtube_uploader import YouTubeUploader
from utils import ensure_directory

# --- CONSTANTES ---
# Utilisation de la variable d'environnement DEBUG_MODE d√©finie dans le workflow YAML
DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
SLOT_HOURS = [8, 12, 16, 20] # Cr√©neaux de d√©clenchement (heures)
SLOT_PAUSE_SECONDS = 5 # Pause r√©duite entre les cr√©neaux en mode --all

def get_current_slot() -> int:
    """
    D√©termine le cr√©neau actuel bas√© sur l'heure.
    8h=0, 12h=1, 16h=2, 20h=3.
    """
    current_hour = datetime.now().hour
    
    # Trouver le cr√©neau le plus proche et pass√©, ou le premier par d√©faut
    for i, hour in enumerate(SLOT_HOURS):
        if current_hour < hour:
            # Si l'heure actuelle est avant le prochain cr√©neau, on reste sur le pr√©c√©dent
            # Mais si on est t√¥t le matin (avant 8h), on prend 8h (slot 0)
            return i - 1 if i > 0 else 0
        
    # Si l'heure est apr√®s le dernier cr√©neau (20h), on utilise le dernier (slot 3)
    return len(SLOT_HOURS) - 1

def create_video_for_slot(slot_number: int, all_daily_contents: List[Dict[str, Any]]) -> Tuple[Optional[str], Optional[Dict[str, Any]]]:
    """Cr√©e une vid√©o pour un cr√©neau sp√©cifique √† partir des donn√©es g√©n√©r√©es."""
    slot_display = slot_number + 1
    
    try:
        if slot_number >= len(all_daily_contents) or slot_number < 0:
            raise IndexError(f"Le cr√©neau {slot_display} est hors limites des contenus g√©n√©r√©s.")
            
        content_data = all_daily_contents[slot_number]
        
        print(f"\nüé¨ CR√âNEAU {slot_display}/{len(SLOT_HOURS)}")
        print("=" * 40)
        
        # Affichage des m√©tadonn√©es
        print(f"üìù Titre: {content_data.get('title', 'N/A')}")
        print(f"üìÑ Script (d√©but): {content_data.get('script', 'N/A')[:100]}...")
        
        # Cr√©er la vid√©o
        creator = VideoCreator()
        video_path = creator.create_professional_video(content_data)
        
        if video_path and os.path.exists(video_path):
            print(f"‚úÖ Vid√©o cr√©√©e: {video_path}")
            return video_path, content_data
        else:
            raise RuntimeError(f"La fonction VideoCreator a √©chou√© pour le cr√©neau {slot_display}.")
        
    except Exception as e:
        print(f"‚ùå Erreur critique lors de la cr√©ation pour le cr√©neau {slot_display}: {e}")
        if DEBUG_MODE:
            traceback.print_exc(file=sys.stdout)
        return None, None

def create_and_process_videos(mode: str) -> List[Dict[str, Any]]:
    """G√®re la cr√©ation et le traitement des vid√©os bas√©s sur le mode (prod ou --all)."""
    successful_videos = []
    
    # 1. G√©n√©ration de TOUT le contenu pour la journ√©e (r√©alis√©e une seule fois)
    try:
        all_daily_contents = generate_daily_contents()
        if not all_daily_contents or len(all_daily_contents) != len(SLOT_HOURS):
            raise ValueError(f"Le g√©n√©rateur a retourn√© {len(all_daily_contents)} contenus au lieu de {len(SLOT_HOURS)}.")
        print(f"üìã Contenus journaliers g√©n√©r√©s ({len(all_daily_contents)} au total).")
    except Exception as e:
        print(f"‚ùå √âchec de la g√©n√©ration des contenus journaliers : {e}")
        if DEBUG_MODE:
             traceback.print_exc(file=sys.stdout)
        return [] # Retourne une liste vide en cas d'√©chec
        
    slots_to_process = range(len(SLOT_HOURS)) if mode == "--all" else [get_current_slot()]
    
    print(f"‚û°Ô∏è Mode d'ex√©cution: {'TOUS LES CR√âNEAUX' if mode == '--all' else f'CR√âNEAU {slots_to_process[0] + 1} (Production)'}")

    for slot in slots_to_process:
        video_path, content_data = create_video_for_slot(slot, all_daily_contents)
        
        if video_path and content_data:
            successful_videos.append({
                'path': video_path,
                'title': content_data['title'],
                'slot': slot + 1,
                'content_data': content_data # Ajouter les donn√©es compl√®tes pour l'uploader
            })
        
        # Pause entre les cr√©neaux uniquement en mode --all
        if mode == "--all" and slot < len(SLOT_HOURS) - 1:
            print(f"\n‚è≥ Pause de {SLOT_PAUSE_SECONDS}s avant le prochain cr√©neau...")
            time.sleep(SLOT_PAUSE_SECONDS)
    
    return successful_videos

def handle_upload(successful_videos: List[Dict[str, Any]]) -> None:
    """G√®re l'upload YouTube pour les vid√©os r√©ussies."""
    if not successful_videos:
        print("üì§ Aucune vid√©o √† uploader.")
        return

    # En mode production, on uploade id√©alement la derni√®re vid√©o cr√©√©e (celle du cr√©neau actuel)
    video_to_upload = successful_videos[-1]
    
    print("\nüì¶ √âTAPE FINALE: Tentative d'Upload YouTube...")
    try:
        uploader = YouTubeUploader()
        # On utilise les donn√©es compl√®tes (content_data) pour le titre, description, tags, etc.
        uploader.upload_video(video_to_upload['path'], video_to_upload['content_data'])
        print("‚úÖ Upload termin√© avec succ√®s.")
    except ImportError:
        # G√©r√© par un fichier d√©sactivateur ou une absence de d√©pendance
        print("‚ö†Ô∏è Upload d√©sactiv√© ou d√©pendance YouTube non trouv√©e (YouTubeUploader).")
    except Exception as e:
        print(f"‚ùå √âchec critique de l'Upload : {e}")
        if DEBUG_MODE:
            traceback.print_exc(file=sys.stdout)

def main() -> bool:
    """Fonction principale du moteur de contenu."""
    
    # D√©tecter le mode d'ex√©cution: --all pour test/d√©mo, sinon production
    mode = "--all" if len(sys.argv) > 1 and sys.argv[1] == "--all" else "production"

    try:
        print("=" * 60)
        print("üéØ YOUTUBE AUTO FACTORY - SYST√àME QUOTIDIEN")
        print("=" * 60)
        print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üêõ Mode DEBUG: {DEBUG_MODE}")
        
        # 1. V√©rifications initiales (centralis√©es)
        print("\nüìã √âTAPE 1: V√©rification des configurations...")
        # Assurez-vous que 'utils' est bien d√©fini pour g√©rer ces chemins
        ensure_directory("output/audio")
        ensure_directory("output/videos")
        ensure_directory("downloaded_images")
        print("‚úÖ Tous les dossiers sont pr√™ts.")

        # 2. Cr√©ation et traitement des vid√©os
        successful_videos = create_and_process_videos(mode)
        
        # 3. R√©sum√© final
        print("\n" + "=" * 50)
        print("üìä RAPPORT FINAL DE PRODUCTION")
        print(f"‚úÖ Vid√©os cr√©√©es avec succ√®s: {len(successful_videos)}/{len(SLOT_HOURS) if mode == '--all' else 1}")
        
        for video in successful_videos:
            print(f"   üé¨ Cr√©neau {video['slot']}: {video['title']}")
            
        # 4. Upload
        handle_upload(successful_videos)
        
        print("\nüéâ PROCESSUS TERMIN√â.")
        return len(successful_videos) > 0 # Retourne True si au moins une vid√©o a √©t√© cr√©√©e

    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE DANS MAIN: {e}")
        if DEBUG_MODE:
            traceback.print_exc(file=sys.stdout)
        return False

if __name__ == "__main__":
    success = main()
    # Le code YAML s'appuie sur le code de retour 0 pour le succ√®s
    sys.exit(0 if success else 1)
