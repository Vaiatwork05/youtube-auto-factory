# .github/workflows/daily-production.yml
# Workflow final optimisé pour la production quotidienne.

name: 🚀 Production - Lancement Quotidien du Moteur

# ===============================================
# DÉCLENCHEURS
# ===============================================
on:
  # Déclenche le workflow à 06h, 10h, 14h et 18h UTC
  schedule:
    - cron: '0 6,10,14,18 * * *' 
  
  # Lancement Manuel pour le test
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer l''exécution du Slot 1 (premier créneau) pour un test immédiat.'
        required: true
        default: 'false'
        type: boolean
        
permissions:
  contents: read 
  
jobs:
  
  # ===============================================
  # JOB 1: Exécution du Moteur (Optimisé avec Cache)
  # ===============================================
  engine_run:
    runs-on: ubuntu-latest
    
    # VARIABLES D'ENVIRONNEMENT GLOBALES
    env:
      FORCE_RUN: ${{ github.event.inputs.force_run || 'false' }} 
      ENGINE_SCRIPT: 'content_factory.auto_content_engine' # Modifié pour le mode module
      OUTPUT_ROOT: 'output' 
      
      # Assure que le répertoire parent est dans PYTHONPATH pour les imports (Correction d'ImportError)
      PYTHONPATH: ${{ github.workspace }}/app
      
      # 🔑 INJECTION DES SECRETS
      UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
      YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
      YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
      YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
      
    steps:
      
      # ⬇️ ÉTAPE 1: Checkout du code
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4
        with:
          path: app 
          
      # 💾 NOUVELLE ÉTAPE: Cache des dépendances Python (pour accélérer les runs)
      - name: 💾 Cache des dépendances Python
        uses: actions/cache@v4
        with:
          # Le chemin où l'environnement virtuel est créé
          path: app/venv 
          # La clé change si le contenu de requirements.txt change
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt') }}
          # Permet de récupérer une version antérieure du cache si la clé principale ne matche pas
          restore-keys: |
            ${{ runner.os }}-pip-

      # 📦 ÉTAPE 2: Préparation, Installation de FFMPEG et Dépendances Python
      - name: 📦 Préparation de l'environnement et Installation de FFMPEG
        working-directory: ./app 
        run: |
          echo "==========================================="
          echo "## 📦 Démarrage de la Préparation de l'Environnement"
          echo "==========================================="
          
          # Installation de FFMPEG sur l'hôte Ubuntu
          echo "-> Installation du paquet FFMPEG..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
          # --- Installation des dépendances Python (avec ou sans cache) ---
          echo "-> Configuration de l'environnement virtuel (Venv)..."
          python3 -m venv venv
          source venv/bin/activate
          
          # ⭐ Auto-update pip
          echo "-> Auto-mise à jour de pip..."
          pip install --upgrade pip setuptools

          echo "-> Installation des dépendances Python (via cache ou téléchargement)..."
          pip install -r requirements.txt 
          
          echo "## ✅ Préparation de l'environnement terminée."
          
      # 🚀 ÉTAPE 3: Exécution du Moteur (Mode Module)
      - name: 🚀 Lancement du Moteur de Contenu
        working-directory: ./app
        run: |
          # Activation de l'environnement virtuel pour exécuter le script
          source venv/bin/activate
          
          echo "========================================================================================================="
          echo "## 🚀 Démarrage de l'Exécution du Moteur (Mode Module)"
          echo "========================================================================================================="
          
          # Exécution en tant que module (Correction d'ImportError)
          MODULE_PATH="content_factory.auto_content_engine"
          
          echo "-> Commande exécutée: python -m ${MODULE_PATH} --force-run ${{ env.FORCE_RUN }}"
          python -m "${MODULE_PATH}" --force-run ${{ env.FORCE_RUN }}
          
          echo "## ✅ Exécution du script terminée."
          
      # 💾 ÉTAPE 4 (a): Log et vérification des artefacts
      - name: 💾 Vérification des Artefacts avant Upload
        if: always() 
        run: |
          echo "## 💾 Vérification du dossier des artefacts: app/${{ env.OUTPUT_ROOT }}"
          ls -R app/${{ env.OUTPUT_ROOT }} || echo "⚠️ Le dossier de sortie est vide ou n'existe pas."

      # 💾 ÉTAPE 4 (b): Sauvegarde des artefacts (Upload)
      - name: ⬆️ Upload des Artefacts de génération
        uses: actions/upload-artifact@v4
        if: always() 
        with:
          name: resultats-${{ github.run_id }}
          path: app/${{ env.OUTPUT_ROOT }} 
          retention-days: 7 
          
  # ===============================================
  # JOB 2: Notifications (S'exécute toujours pour le rapport)
  # ===============================================
  notification_job:
    runs-on: ubuntu-latest
    needs: engine_run 
    if: always()
    
    steps:
      # 🔔 Notification de Succès
      - name: 🔔 Notification de Succès
        if: success() && needs.engine_run.result == 'success'
        run: |
          echo "==========================================="
          echo "🎉 Le workflow de production s'est terminé avec succès !"
          echo "==========================================="
          
      # 🔔 Notification d'Échec
      - name: 🔔 Notification d'Échec
        if: failure() || needs.engine_run.result == 'failure'
        run: |
          echo "==========================================="
          echo "❌ ÉCHEC CRITIQUE: Le workflow de production a échoué."
          echo "❌ Veuillez consulter les logs du Job 'engine_run' pour diagnostiquer le problème."
          echo "==========================================="
