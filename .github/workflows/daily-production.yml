# .github/workflows/daily-production.yml
# Workflow final optimis√© (Utilisation de Conteneur pour la stabilit√©)

name: üöÄ Production - Lancement Quotidien (Optimis√©)

# √âv√©nement de lancement manuel avec mode Debug
on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Activer le mode Debug (true/false) pour le script Python.'
        required: true
        default: 'false'
        type: boolean
        
# Permissions de s√©curit√© minimales
permissions:
  contents: read # Lecture seule pour le checkout
  
jobs:
  daily_production_job:
    # Utilisation d'un conteneur Docker pour garantir la coh√©rence de l'environnement
    container:
      image: python:3.11-slim-buster # Image Python l√©g√®re et stable
      
    runs-on: ubuntu-latest
    
    # Variables d'environnement globales pour le job
    env:
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      ENGINE_SCRIPT: 'content_factory/auto_content_engine.py'
      DISABLE_SCRIPT: 'scripts/disable_youtube_uploader.py'
      OUTPUT_DIR: './output_results/'
      
    steps:
    
    # ‚¨áÔ∏è √âTAPE 1: Initialisation
    # N√©cessite un chemin 'path' pour checkout dans un conteneur
    - name: ‚¨áÔ∏è Checkout du code
      uses: actions/checkout@v4
      with:
        path: app # Le code sera clon√© dans /app dans le conteneur
    
    # üì¶ √âTAPE 2: Installation et Mise √† jour
    # Ces commandes sont ex√©cut√©es dans le conteneur Python
    - name: üì¶ Pr√©paration de l'environnement
      working-directory: ./app # D√©finir le r√©pertoire de travail dans le conteneur
      run: |
        echo "## Installation des d√©pendances Python"
        # S'assurer que pip et setuptools sont √† jour pour √©viter les probl√®mes
        python -m pip install --upgrade pip setuptools
        
        # Installer les d√©pendances du projet
        pip install -r requirements.txt
        
    # üöÄ √âTAPE 3: Pr√©paration et Lancement du Moteur
    - name: üöÄ Ex√©cution du Workflow Python
      working-directory: ./app
      run: |
        echo "## D√©marrage du processus de g√©n√©ration"
        echo "Mode Debug: ${{ env.DEBUG_MODE }}"
        
        # 3.1. Ex√©cution conditionnelle du script de d√©sactivation
        if [ -f "${{ env.DISABLE_SCRIPT }}" ]; then
          echo "Ex√©cution de la d√©sactivation..."
          python "${{ env.DISABLE_SCRIPT }}"
        else
          echo "‚ö†Ô∏è Avertissement: Script de d√©sactivation non trouv√©."
        fi
        
        # 3.2. Lancement du Moteur de Contenu
        if [ -f "${{ env.ENGINE_SCRIPT }}" ]; then
          echo "Lancement du Moteur : ${{ env.ENGINE_SCRIPT }}"
          
          # Ex√©cution. Utilise 'python' car nous sommes dans un conteneur python:3.11
          DEBUG_MODE=${{ env.DEBUG_MODE }} python "${{ env.ENGINE_SCRIPT }}"
          
        else
          echo "‚ùå Erreur Critique : Fichier Moteur manquant (${{ env.ENGINE_SCRIPT }})."
          exit 1
        fi
        
    # üíæ √âTAPE 4: Sauvegarde des r√©sultats
    # L'artefact est upload√© depuis le chemin de travail du conteneur (/app/output_results/)
    - name: üíæ Sauvegarde des Artefacts de g√©n√©ration
      uses: actions/upload-artifact@v4
      if: always() 
      with:
        name: resultats-${{ github.run_id }}
        path: app/${{ env.OUTPUT_DIR }} # Chemin ajust√© au conteneur
        retention-days: 7 
        
    # üîî √âTAPE 5: Notifications
    - name: üîî Notification du Statut
      run: |
        if [[ $? -eq 0 ]]; then
          echo "üéâ Le workflow s'est termin√© avec succ√®s !"
        else
          echo "‚ùå Le workflow a √©chou√©. Veuillez consulter les logs."
          exit 1 # Pour s'assurer que l'√©tape √©choue si le run pr√©c√©dent a √©chou√©
        fi
      # La condition 'always()' permet d'atteindre cette √©tape apr√®s l'upload, 
      # mais nous v√©rifions le statut du job avec $? (ou nous pourrions utiliser 'if: success()')
      # Pour cette version, je reviens √† 'if: success()'/'if: failure()' pour plus de clart√©
      if: always()
