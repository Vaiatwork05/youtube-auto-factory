name: 🚀 Production - Système avec Configuration Existante

on:
  schedule:
    - cron: '0 6,10,14,18 * * *'
  
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Forcer exécution du moteur'
        required: true
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  setup:
    name: ⚙️ Configuration Initiale
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 🔧 Vérification de la Configuration
        run: |
          echo "## ⚙️ VÉRIFICATION DE LA CONFIGURATION"
          
          # Vérifier les fichiers de configuration existants
          config_files=("config.yaml" "config/settings.yaml" "settings.yaml")
          config_found=false
          
          for config_file in "${config_files[@]}"; do
            if [ -f "$config_file" ]; then
              echo "✅ Configuration trouvée: $config_file"
              echo "📄 Contenu (premières lignes):"
              head -10 "$config_file"
              config_found=true
              break
            fi
          done
          
          if [ "$config_found" = false ]; then
            echo "⚠️ Aucun fichier de configuration trouvé, création config.yaml par défaut..."
            cat > config.yaml << 'EOF'
# Configuration YouTube Auto Factory
PATHS:
  OUTPUT_ROOT: "output"
  AUDIO_DIR: "audio"
  VIDEO_DIR: "videos"
  IMAGE_DIR: "images"
  LOG_DIR: "logs"

WORKFLOW:
  SLOT_HOURS: [8, 12, 16, 20]
  SLOT_PAUSE_SECONDS: 10

CONTENT:
  THEMES: ["technologie", "science", "innovation"]
  DEFAULT_VIDEO_DURATION: 60

YOUTUBE:
  UPLOAD_ENABLED: false

DEBUG:
  ENABLED: false
EOF
            echo "✅ Configuration par défaut créée: config.yaml"
          fi
          
          echo "## 📁 FICHIERS DE CONFIGURATION DISPONIBLES:"
          find . -name "*.yaml" -o -name "*.yml" | head -10

  verification:
    name: 🔍 Vérification du Système
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 📊 Diagnostic de l'Environnement
        run: |
          echo "## 🖥️ INFORMATION SYSTÈME"
          echo "Répertoire de travail: $GITHUB_WORKSPACE"
          echo "## 📁 STRUCTURE DU PROJET:"
          find . -type f \( -name "*.py" -o -name "*.yaml" -o -name "*.yml" \) | head -20 | sort

      - name: 🔍 Vérification des Fichiers Critiques
        run: |
          echo "## 📋 VÉRIFICATION DES FICHIERS"
          
          critical_files=(
            "content_factory/auto_content_engine.py"
            "content_factory/config_loader.py"
            "content_factory/content_generator.py"
            "content_factory/video_creator.py"
            "content_factory/youtube_uploader.py"
            "content_factory/utils.py"
            "requirements.txt"
          )
          
          echo "## FICHIERS OBLIGATOIRES:"
          all_critical_exists=true
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ $file - MANQUANT"
              all_critical_exists=false
            fi
          done
          
          echo "## FICHIERS DE CONFIGURATION:"
          config_files=("config.yaml" "config/settings.yaml" "settings.yaml")
          config_found=false
          for file in "${config_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
              config_found=true
            fi
          done
          
          if [ "$config_found" = false ]; then
            echo "⚠️ Aucun fichier de configuration trouvé (mais un défaut a été créé)"
          fi
          
          if [ "$all_critical_exists" = false ]; then
            echo "::error::Fichiers critiques manquants"
            exit 1
          fi

      - name: 🧪 Test des Imports et Configuration
        run: |
          echo "## 🐍 TEST DE LA CONFIGURATION"
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          python -c "
          try:
              print('🔧 Chargement de la configuration...')
              from content_factory.config_loader import ConfigLoader
              config = ConfigLoader().get_config()
              print('✅ Configuration chargée avec succès')
              
              # Afficher les paramètres importants
              print(f'📁 Dossier sortie: {config.get(\\\"PATHS\\\", {}).get(\\\"OUTPUT_ROOT\\\", \\\"output\\\")}')
              print(f'⏰ Créneaux: {config.get(\\\"WORKFLOW\\\", {}).get(\\\"SLOT_HOURS\\\", [8, 12, 16, 20])}')
              print(f'📤 Upload YouTube: {config.get(\\\"YOUTUBE\\\", {}).get(\\\"UPLOAD_ENABLED\\\", False)}')
              
              print('🔧 Test autres imports...')
              from content_factory.content_generator import generate_daily_contents
              from content_factory.video_creator import VideoCreator
              from content_factory.utils import ensure_directory
              
              print('🎉 TOUS LES IMPORTS - SUCCÈS')
              
          except Exception as e:
              print(f'❌ ERREUR: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: 📦 Vérification des Dépendances
        run: |
          echo "## 📦 VÉRIFICATION REQUIREMENTS.TXT"
          if [ -f "requirements.txt" ]; then
            echo "Dépendances à installer:"
            cat requirements.txt
          else
            echo "❌ requirements.txt non trouvé"
            exit 1
          fi

  production:
    name: 🚀 Moteur de Production
    runs-on: ubuntu-latest
    needs: verification

    env:
      FORCE_RUN: ${{ fromJSON(github.event.inputs.force_run || 'false') }}
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration Python avec Cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 🛠️ Installation des Dépendances Système
        run: |
          echo "## 🔧 INSTALLATION FFMPEG"
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          echo "✅ FFmpeg installé"

      - name: 📦 Installation des Dépendances Python
        run: |
          echo "## 📦 INSTALLATION DES PAQUETS PYTHON"
          pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dépendances installées"

      - name: 🔧 Vérification Pré-Lancement
        run: |
          echo "## 🔧 VÉRIFICATION FINALE"
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          python -c "
          from content_factory.config_loader import ConfigLoader
          config = ConfigLoader().get_config()
          print('⚙️ Configuration active:')
          print(f'  • Output: {config.get(\\\"PATHS\\\", {}).get(\\\"OUTPUT_ROOT\\\")}')
          print(f'  • Créneaux: {config.get(\\\"WORKFLOW\\\", {}).get(\\\"SLOT_HOURS\\\")}')
          print(f'  • Upload: {config.get(\\\"YOUTUBE\\\", {}).get(\\\"UPLOAD_ENABLED\\\")}')
          "

      - name: 🚀 Exécution du Moteur de Contenu
        timeout-minutes: 30
        run: |
          echo "## 🚀 LANCEMENT DU MOTEUR"
          echo "Mode FORCE: $FORCE_RUN"
          echo "Répertoire: $(pwd)"
          
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          python content_factory/auto_content_engine.py --force-run "$FORCE_RUN" --debug
          
          echo "🎉 Moteur exécuté"

      - name: 📁 Analyse des Résultats
        if: always()
        run: |
          echo "## 📁 ANALYSE POST-EXÉCUTION"
          if [ -d "output" ]; then
            echo "✅ Dossier output créé"
            find output/ -type f | head -10
          else
            echo "⚠️ Aucun output créé"
          fi

      - name: 💾 Sauvegarde des Résultats
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-results-${{ github.run_id }}
          path: |
            output/
            *.log
          retention-days: 7

  notification:
    name: 🔔 Notification
    runs-on: ubuntu-latest
    needs: [setup, verification, production]
    if: always()

    steps:
      - name: 📢 Rapport Final
        run: |
          echo "## 🔔 RAPPORT FINAL"
          echo "Setup: ${{ needs.setup.result }}"
          echo "Verification: ${{ needs.verification.result }}"
          echo "Production: ${{ needs.production.result }}"
          
          if [ "${{ needs.verification.result }}" = "success" ] && [ "${{ needs.production.result }}" = "success" ]; then
            echo "🎉 SUCCÈS COMPLET"
          else
            echo "❌ ÉCHEC - Vérifier les logs"
          fi
