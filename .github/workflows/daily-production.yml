name: YouTube Auto Factory - 4x Daily

on:
  workflow_dispatch:
    inputs:
      run_all_slots:
        description: 'Créer les 4 vidéos de la journée'
        required: false
        default: false
        type: boolean
  schedule:
    # 4 exécutions par jour : 8h, 12h, 16h, 20h (UTC)
    - cron: '0 6 * * *'   # 8h CEST (6h UTC)
    - cron: '0 10 * * *'  # 12h CEST (10h UTC)
    - cron: '0 14 * * *'  # 16h CEST (14h UTC)
    - cron: '0 18 * * *'  # 20h CEST (18h UTC)

jobs:
  generate-video:
    runs-on: ubuntu-latest
    
    env:
      UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg espeak espeak-data libespeak-dev
        ffmpeg -version
        espeak --version
        
    - name: 🔧 Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_core.txt
        
    - name: 🔧 Install extra dependencies
      run: |
        if [ -f "requirements_extra.txt" ]; then
          pip install -r requirements_extra.txt
        else
          echo "⚠️  requirements_extra.txt non trouvé, installation des extras manuelle"
          pip install google-api-python-client==2.108.0 || echo "Google API optionnel"
          pip install python-unsplash==1.1.0 || echo "Unsplash optionnel"
        fi
        
    - name: 🧪 Test dependencies
      run: |
        python -c "
        packages = ['moviepy', 'PIL', 'numpy', 'imageio', 'requests', 'edge_tts', 'gtts', 'aiohttp', 'pydub', 'cv2']
        for pkg in packages:
            try:
                if pkg == 'cv2': import cv2
                else: __import__(pkg)
                print(f'✅ {pkg}')
            except: print(f'⚠️  {pkg}')
        "
        
    - name: 📁 Create output directories
      run: |
        mkdir -p output/videos
        mkdir -p output/audio  
        mkdir -p output/images
        mkdir -p output/logs
        echo "📁 Dossiers créés"
        
    - name: 🎬 Create video for current slot
      id: create_video
      if: ${{ !inputs.run_all_slots }}
      run: |
        echo "🕒 Début production vidéo pour créneau actuel..."
        python content_factory/auto_content_engine.py
      continue-on-error: true
      
    - name: 🎬 Create all daily videos  
      id: create_all_videos
      if: ${{ inputs.run_all_slots }}
      run: |
        echo "🕒 Début production des 4 vidéos quotidiennes..."
        python content_factory/auto_content_engine.py --all
      continue-on-error: true
        
    - name: 📤 Upload video artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: youtube-videos-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          output/
        retention-days: 1
        
    - name: 📊 Show production summary
      if: always()
      run: |
        echo "📊 RAPPORT DE PRODUCTION"
        echo "========================"
        echo "🕐 Heure: $(date)"
        echo ""
        echo "📹 Vidéos créées:"
        find output/videos -name "*.mp4" -type f 2>/dev/null | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "   - $(basename "$file") ($size)"
        done || echo "   Aucune vidéo trouvée"
        echo ""
        echo "🔊 Fichiers audio:"
        find output/audio -name "*.mp3" -type f 2>/dev/null | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "   - $(basename "$file") ($size)"
        done || echo "   Aucun audio trouvé"
        echo ""
        echo "🖼️ Images générées:"
        find output/images -name "*.jpg" -type f 2>/dev/null | head -5 | while read file; do
          echo "   - $(basename "$file")"
        done
        count=$(find output/images -name "*.jpg" -type f 2>/dev/null | wc -l)
        echo "   Total: $count images"
        
    - name: 🚨 Notification on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 YouTube Auto Factory - Production Failed',
            body: 'La production vidéo a échoué. Veuillez vérifier les logs du workflow.'
          })
