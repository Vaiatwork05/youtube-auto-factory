# content_factory/auto_content_engine.py (Orchestrateur Final)

import os
import sys
import time
import traceback
from datetime import datetime
from typing import Dict, Any, Tuple, List, Optional

# Imports relatifs des modules du projet
from .content_generator import generate_daily_contents
from .video_creator import VideoCreator
from .youtube_uploader import YouTubeUploader
from .utils import ensure_directory
from .config_loader import ConfigLoader # NOUVEL IMPORT

# D√©claration d'une variable globale pour la configuration (initialis√©e dans main)
CONFIG: Optional[Dict[str, Any]] = None

def get_current_slot(slot_hours: List[int]) -> int:
    """
    D√©termine le cr√©neau actuel bas√© sur l'heure.
    8h=0, 12h=1, 16h=2, 20h=3.
    """
    current_hour = datetime.now().hour
    
    # Si l'heure est apr√®s le dernier cr√©neau, on utilise le dernier (ex: 20:30 -> slot 3)
    if current_hour >= slot_hours[-1]:
        return len(slot_hours) - 1
        
    # Trouver le cr√©neau le plus proche et pass√©
    for i, hour in enumerate(slot_hours):
        if current_hour < hour:
            # Si on est avant le premier cr√©neau (8h), on prend le premier (slot 0)
            return i - 1 if i > 0 else 0
            
    # Devrait √™tre couvert par la premi√®re condition, mais assure la s√©curit√©
    return 0 

def create_video_for_slot(slot_number: int, all_daily_contents: List[Dict[str, Any]], slot_hours: List[int]) -> Tuple[Optional[str], Optional[Dict[str, Any]]]:
    """Cr√©e une vid√©o pour un cr√©neau sp√©cifique √† partir des donn√©es g√©n√©r√©es."""
    global CONFIG
    # Utiliser le mode DEBUG depuis la config (qui est un simple os.getenv, ici on simule)
    debug_mode = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
    
    slot_display = slot_number + 1
    
    try:
        if slot_number >= len(all_daily_contents) or slot_number < 0:
            raise IndexError(f"Le cr√©neau {slot_display} est hors limites des contenus g√©n√©r√©s.")
            
        content_data = all_daily_contents[slot_number]
        
        print(f"\nüé¨ CR√âNEAU {slot_display}/{len(slot_hours)} - Heure cible: {slot_hours[slot_number]}h00")
        print("=" * 45)
        
        # Affichage des m√©tadonn√©es
        print(f"üìù Titre: {content_data.get('title', 'N/A')}")
        
        # Cr√©er la vid√©o
        creator = VideoCreator() # Initialisation utilise la config
        video_path = creator.create_professional_video(content_data)
        
        if video_path and os.path.exists(video_path):
            print(f"‚úÖ Vid√©o cr√©√©e: {video_path}")
            return video_path, content_data
        else:
            raise RuntimeError(f"La fonction VideoCreator a √©chou√© pour le cr√©neau {slot_display}.")
        
    except Exception as e:
        print(f"‚ùå Erreur critique lors de la cr√©ation pour le cr√©neau {slot_display}: {e}")
        if debug_mode:
            traceback.print_exc(file=sys.stdout)
        return None, None

def create_and_process_videos(mode: str, slot_hours: List[int], slot_pause_s: int) -> List[Dict[str, Any]]:
    """G√®re la cr√©ation et le traitement des vid√©os bas√©s sur le mode (prod ou --all)."""
    successful_videos = []
    
    # 1. G√©n√©ration de TOUT le contenu pour la journ√©e
    try:
        all_daily_contents = generate_daily_contents() # Utilise le nombre de slots du config.yaml
        
        # V√©rification bas√©e sur le nombre de cr√©neaux d√©fini dans le moteur (SLOT_HOURS)
        if not all_daily_contents or len(all_daily_contents) != len(slot_hours):
            print(f"‚ö†Ô∏è AVERTISSEMENT: Le g√©n√©rateur a produit {len(all_daily_contents)} contenus, mais le moteur attend {len(slot_hours)} cr√©neaux.")
        
        print(f"üìã Contenus journaliers g√©n√©r√©s ({len(all_daily_contents)} au total).")
    except Exception as e:
        print(f"‚ùå √âchec de la g√©n√©ration des contenus journaliers : {e}")
        return []
        
    slots_to_process = range(len(slot_hours)) if mode == "--all" else [get_current_slot(slot_hours)]
    
    print(f"‚û°Ô∏è Mode d'ex√©cution: {'TOUS LES CR√âNEAUX' if mode == '--all' else f'CR√âNEAU {slots_to_process[0] + 1} (Production)'}")

    for slot in slots_to_process:
        video_path, content_data = create_video_for_slot(slot, all_daily_contents, slot_hours)
        
        if video_path and content_data:
            successful_videos.append({
                'path': video_path,
                'title': content_data['title'],
                'slot': slot + 1,
                'content_data': content_data
            })
        
        # Pause entre les cr√©neaux uniquement en mode --all
        if mode == "--all" and slot < len(slot_hours) - 1:
            print(f"\n‚è≥ Pause de {slot_pause_s}s avant le prochain cr√©neau...")
            time.sleep(slot_pause_s)
    
    return successful_videos

def handle_upload(successful_videos: List[Dict[str, Any]], mode: str) -> None:
    """G√®re l'upload YouTube pour les vid√©os r√©ussies."""
    if not successful_videos:
        print("üì§ Aucune vid√©o √† uploader.")
        return

    # En mode --all (test/d√©mo), on uploade id√©alement la premi√®re vid√©o cr√©√©e.
    # En mode production, on uploade la vid√©o qui vient d'√™tre cr√©√©e (la derni√®re de la liste).
    video_to_upload = successful_videos[0] if mode == "--all" else successful_videos[-1]
    
    print("\nüì¶ √âTAPE FINALE: Tentative d'Upload YouTube...")
    try:
        uploader = YouTubeUploader() # Initialisation utilise la config pour les secrets
        # On utilise les donn√©es compl√®tes (content_data) pour le titre, description, tags, etc.
        uploader.upload_video(video_to_upload['path'], video_to_upload['content_data'])
        print("‚úÖ Upload termin√© avec succ√®s.")
    except ImportError:
        print("‚ö†Ô∏è Upload d√©sactiv√© ou d√©pendance YouTube non trouv√©e.")
    except Exception as e:
        print(f"‚ùå √âchec critique de l'Upload : {e}")
        # Le mode DEBUG est g√©r√© par la classe Uploader elle-m√™me, mais on le rappelle ici pour la clart√©.


def main() -> bool:
    """Fonction principale du moteur de contenu."""
    global CONFIG
    
    try:
        # --- 1. CHARGEMENT DE LA CONFIGURATION ET DES CONSTANTES ---
        CONFIG = ConfigLoader().get_config()
        
        # Assurez-vous que les constantes proviennent de la configuration
        slot_hours = CONFIG.get('WORKFLOW', {}).get('SLOT_HOURS', [8, 12, 16, 20])
        slot_pause_s = CONFIG.get('WORKFLOW', {}).get('SLOT_PAUSE_SECONDS', 5)
        
        # Le mode DEBUG est laiss√© en variable d'environnement pour le workflow YAML, mais on peut le lire ici
        debug_mode = os.getenv('DEBUG_MODE', 'false').lower() == 'true'

        # D√©tecter le mode d'ex√©cution
        mode = "--all" if len(sys.argv) > 1 and sys.argv[1] == "--all" else "production"

        print("=" * 60)
        print("üéØ YOUTUBE AUTO FACTORY - SYST√àME QUOTIDIEN")
        print("=" * 60)
        print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üêõ Mode DEBUG: {debug_mode}")
        print(f"‚è±Ô∏è Cr√©neaux d√©finis: {slot_hours}")
        
        # 2. V√©rifications initiales (centralis√©es)
        print("\nüìã √âTAPE 2: V√©rification des dossiers de sortie...")
        
        output_root = CONFIG['PATHS']['OUTPUT_ROOT']
        audio_dir = CONFIG['PATHS']['AUDIO_DIR']
        video_dir = CONFIG['PATHS']['VIDEO_DIR']
        image_dir = CONFIG['PATHS']['IMAGE_DIR']

        ensure_directory(output_root)
        ensure_directory(os.path.join(output_root, audio_dir))
        ensure_directory(os.path.join(output_root, video_dir))
        ensure_directory(os.path.join(output_root, image_dir))
        print("‚úÖ Tous les dossiers sont pr√™ts.")

        # 3. Cr√©ation et traitement des vid√©os
        successful_videos = create_and_process_videos(mode, slot_hours, slot_pause_s)
        
        # 4. R√©sum√© final
        print("\n" + "=" * 50)
        print("üìä RAPPORT FINAL DE PRODUCTION")
        print(f"‚úÖ Vid√©os cr√©√©es avec succ√®s: {len(successful_videos)}/{len(slot_hours) if mode == '--all' else 1}")
        
        for video in successful_videos:
            print(f"   üé¨ Cr√©neau {video['slot']}: {video['title']}")
            
        # 5. Upload
        handle_upload(successful_videos, mode)
        
        print("\nüéâ PROCESSUS TERMIN√â.")
        return len(successful_videos) > 0

    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE DANS MAIN: {e}")
        if debug_mode:
            traceback.print_exc(file=sys.stdout)
        return False

if __name__ == "__main__":
    # Correction: Mettez les SLOT_HOURS dans config.yaml ou laissez-les en dur pour l'ex√©cution initiale
    # Pour l'ex√©cution en Python pur, il faut s'assurer que les imports relatifs fonctionnent (lancement depuis le dossier parent)
    
    # Pour le test, on ajoute une v√©rification simple des imports relatifs dans le bloc d'ex√©cution :
    try:
        from content_factory.config_loader import ConfigLoader
    except ImportError:
        print("‚ùå ERREUR D'IMPORTATION: Veuillez lancer le script depuis le dossier racine du projet (pas depuis content_factory).")
        print(f"Ex: python3 content_factory/auto_content_engine.py")
        sys.exit(1)
        
    success = main()
    # Le code de retour 0 pour le succ√®s est la norme pour les workflows CI/CD
    sys.exit(0 if success else 1)
