name: 🚀 Génération Vidéo Automatisée

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Activer le mode Debug (création d''images factices)'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: "0 6,12,18 * * *" # 6h00, 12h00, 18h00 UTC

jobs:
  generate-video:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Augmenté à 15 min pour le montage vidéo
    
    steps:
      # ÉTAPE 1: Récupération du code source
      - name: 📥 Checkout du repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ÉTAPE 2: Configuration de l'environnement Python
      - name: 🐍 Configuration de Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      # ÉTAPE 3: Installation des dépendances système
      - name: 📦 Installation des dépendances système
        run: |
          sudo apt-get update -y
          # Installation plus propre
          sudo apt-get install -y ffmpeg espeak libespeak1
          echo "✅ Dépendances système installées"
      
      # ÉTAPE 4: Installation des dépendances Python
      - name: 🔧 Installation des dépendances Python
        run: |
          python -m pip install --upgrade pip
          # Utiliser un seul bloc pour l'installation des dépendances vidéo complètes
          # Suppression du "if [ -f requirements.txt ]" pour la clarté de l'exemple
          pip install Pillow numpy requests openai gtts moviepy pydub
          echo "✅ Dépendances Python installées"

      # --- Modules Python sont désormais codés dans le dépôt (bonne pratique) ---
      
      # ÉTAPE 5: Création de la structure de dossiers
      - name: 📁 Création de l'arborescence
        run: |
          mkdir -p output/{videos,audio,images,logs}
          echo "✅ Structure de dossiers créée"
      
      # ÉTAPE 6: Exportation des secrets (meilleure pratique)
      - name: 🔑 Exportation des secrets
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "DEBUG_MODE=${{ github.event.inputs.debug_mode }}" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # ÉTAPE 7: Exécution de la génération
      - name: 🎬 Exécution du Moteur de Contenu
        run: |
          echo "🎬 LANCEMENT DE LA GÉNÉRATION..."
          python content_factory/main_engine.py
        env:
          # Assurez-vous que les variables d'environnement sont disponibles ici aussi
          DEBUG_MODE: ${{ github.event.inputs.debug_mode }}

      # ÉTAPE 8: Sauvegarde des résultats
      - name: 💾 Sauvegarde des artefacts
        uses: actions/upload-artifact@v4
        with:
          name: generation-resultats-${{ github.sha }}
          path: |
            output/
          retention-days: 2
          if-no-files-found: warn

      # ÉTAPE 9: Rapport final
      - name: 📊 Rapport final
        if: always()
        run: |
          echo " "
          echo "📊 RAPPORT FINAL DE GÉNÉRATION"
          echo "================================"
          # Afficher si le fichier rapport principal existe
          if [ -f "output/logs/rapport_generation.txt" ]; then
            cat output/logs/rapport_generation.txt
          else
            echo "⚠️ Fichier rapport introuvable."
            echo "Vérifiez les logs d'erreur dans output/logs/."
          fi
